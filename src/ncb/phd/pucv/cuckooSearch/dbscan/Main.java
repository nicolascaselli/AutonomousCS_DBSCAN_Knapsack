package ncb.phd.pucv.cuckooSearch.dbscan;

import java.io.FileNotFoundException;
import java.io.IOException;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.Map;
//import java.util.Random;

import ncb.phd.pucv.cuckooSearch.Punto;



public class Main {
	public static void main(String[] args) throws FileNotFoundException, IOException {
//		Random random = new Random(4520);
		float[] solucion = new float[]{0.03602842776638848f, 0.6404693963900914f, 0.8830288440780749f, 0.4879013605734842f, 0.6923386831129161f, 0.1507610188022126f, 0.10669329662449423f, 0.015512998856967108f, 0.8431918049199669f, 0.3732137247558015f, 0.8283120462465335f, 0.44245970788687494f, 0.676514614211176f, 0.9560807592482952f, 0.7873268721690779f, 0.057803124035997855f, 0.15181850316645362f, 0.23086018492339344f, 0.6626660353839827f, 0.29321703059174264f, 0.4505597651383252f, 0.5940092520508867f, 0.05392637497831165f, 0.897827794299307f, 0.47862617013369724f, 0.8370172909101828f, 0.09348662167635002f, 0.3194719747583459f, 0.6587183484329053f, 0.8727345202427993f, 0.7303969204083364f, 0.2272520744611758f, 0.6550618347540433f, 0.9582506910721978f, 0.9210737168061011f, 0.10865038840087804f, 0.7668873601473822f, 0.7374517415912674f, 0.8734555446424914f, 0.5696129202677485f, 0.9987518267781894f, 0.16245321256205136f, 0.09403560738501815f, 0.0554837683416507f, 0.5966328141014582f, 0.39013710984256844f, 0.6679260952428926f, 0.8850919711020395f, 0.5290243558423985f, 0.478654560825418f, 0.7771902863880803f, 0.32769161503319144f, 0.662903122593594f, 0.8591160590084577f, 0.20508680649807776f, 0.15188608062077325f, 0.5706463867033763f, 0.8931293618140453f, 0.048472529581859436f, 0.8644380180650736f, 0.2066953182884279f, 0.7499552128932709f, 0.9506931338186f, 0.12038324954983193f, 0.9518657643316095f, 0.05774825859143218f, 0.9335105728373849f, 0.8955150108616852f, 0.4639132023605872f, 0.7053735848143855f, 0.4570291335204927f, 0.8171482582369392f, 0.2098120838355283f, 0.6468149842485674f, 0.8270971672109999f, 0.45706395261208044f, 0.6955334552537394f, 0.17759677547980857f, 0.10481494593526675f, 0.16392441703033156f, 0.9411497580097118f, 0.5283479905169371f, 0.699642063855561f, 0.4322027047859798f, 0.14848960378380505f, 0.3647000255457733f, 0.4839579063928632f, 0.999700525730576f, 0.9407666952262971f, 0.7799359729897347f, 0.1411135624446942f, 0.5520738655491367f, 0.8131283373700897f, 0.05532665424786554f, 0.14956542545211293f, 0.8617934408706497f, 0.5614118133172813f, 0.42190534090265996f, 0.42046949102982356f, 0.03573468682053216f, 0.6400740305938124f, 0.5675420908534251f, 0.6109270384499361f, 0.04870754474431993f, 0.7453515292501658f, 0.15192548895863467f, 0.6956238114708044f, 0.5417573934894455f, 0.3104615990766524f, 0.06752705566951933f, 0.18389411882668005f, 0.07579815101728704f, 0.1120596741903177f, 0.3328142038704178f, 0.32668710888076824f, 0.02746639659638761f, 0.47210688224354724f, 0.2769972166156811f, 0.1711647422865148f, 0.4407213522234784f, 0.19959246918053986f, 0.4963751605632817f, 0.759059515491991f, 0.5967868147026115f, 0.1498592382318512f, 0.8004755933185201f, 0.8520138409443199f, 0.36947767163112566f, 0.8370199150036014f, 0.24546657818343565f, 0.6134061753174563f, 0.30832848209412567f, 0.6178262503401606f, 0.7713210132499984f, 0.9540896568896913f, 0.5667513435218557f, 0.12078263876450179f, 0.9280324884770333f, 0.02544862993664554f, 0.4861595022024163f, 0.24722992184689507f, 0.8648672851437467f, 0.422047569347466f, 0.8593218962438121f, 0.4729080777632295f, 0.8135725791645528f, 0.05185164003563425f, 0.9291969391414622f, 0.2872092845334736f, 0.22409561096089592f, 0.06667437341494997f, 0.6552504819952123f, 0.4890323488798147f, 0.35826991381593754f, 0.5429578221995062f, 0.12873178362772753f, 0.7631169427199375f, 0.11249301768284903f, 0.41387470986208097f, 0.35173899980158996f, 0.7998286946226268f, 0.14918695864331466f, 0.05222177089299207f, 0.4833834340395522f, 0.8481178225041254f, 0.2130437855260351f, 0.7307529631053086f, 0.08680334432899584f};
//		Map<Integer, Double> puntos = new HashMap<Integer, Double>(); 
		
//        ArrayList<Number> numbers = new ArrayList<Number>();
        ArrayList<Punto> punto = new ArrayList<Punto>();
        
        int i = 0;
//        while (i < 168) {
//        	Float[] nido = new Float[1];
//			nido[0] = random.nextFloat();
//			Punto p = new Punto(nido, i);
//            i++;
//            punto.add(p);
//        }
		for (float val : solucion) {
			Float[] nido = new Float[1];
			nido[0] = val;
			Punto p = new Punto(nido, i);
			i++;
			punto.add(p);
		}
        System.out.println("antes: "+punto.toString());
        int minCluster = 5;
        double maxDistance = 0.0095;
        
        DBSCANClusterer<Punto> clusterer = null;
        try {
            clusterer = new DBSCANClusterer<Punto>(punto, minCluster, maxDistance, new DistanceMetricPunto());
        } catch (DBSCANClusteringException e1) {
            System.out.println("Should not have failed on instantiation: " + e1);
        }
        
        ArrayList<ArrayList<Punto>> result = null;
        
        try {
            result = clusterer.performClustering();
            
        } catch (DBSCANClusteringException e) {
            System.out.println("Should not have failed while performing clustering: " + e);
        }
        int totales = 0;
        System.out.println("Number of clusters: "+ result.size());
        System.out.println("Number of Noise Values: "+ clusterer.getNoiseValues().toString());
        float factorCambio = 0.5f/result.size();
        
		Map <Integer, Float> mFactorCluster = new HashMap <Integer, Float>();
		i = 1;
        for (ArrayList<Punto> list : result)
        {
        	mFactorCluster.put(i, factorCambio);
        	
        	System.out.println(list.toString());
        	for(Punto p : list) {
        		System.out.println(p.getPosicionFila());
        		
        		totales++;
        		}
        	i++;
        	factorCambio*=i;
        }
        System.out.println("Cantidad de valores Clusterizados: "+ totales);
        System.out.println("Cantidad de Valores Ruido: "+ clusterer.getNoiseValues().size());
        System.out.println("Cantidad total de valores: "+ solucion.length);
        
        
        

        
	}

}
